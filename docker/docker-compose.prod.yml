version: '3.8'

services:
  frontend:
    build:
      context: ..
      dockerfile: docker/frontend.prod.dockerfile
    container_name: nextjs-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-https://yourdomain.com}
    depends_on:
      - mock-backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mock-backend:
    build:
      context: ..
      dockerfile: docker/mock-backend.dockerfile
    container_name: mock-backend-prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourdomain.com}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - mock-backend
    networks:
      - app-network
    restart: unless-stopped

  # Optional: PostgreSQL for production database
  # postgres:
  #   image: postgres:16-alpine
  #   container_name: postgres-prod
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER:-postgres}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
  #     - POSTGRES_DB=${POSTGRES_DB:-app_db}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #     - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Optional: Redis for caching and sessions
  # redis:
  #   image: redis:7-alpine
  #   container_name: redis-prod
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
